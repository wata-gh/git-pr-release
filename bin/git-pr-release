#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

require 'uri'
require 'erb'
require 'open3'
require 'tmpdir'
require 'json'
require 'optparse'

require 'octokit'
require 'colorize'
require 'diff/lcs'

class PullRequest
  attr_reader :pr

  def initialize(pr)
    @pr = pr
  end

  def to_checklist_item
    "- [ ] ##{pr.number} #{pr.title}" +
       (pr.assignee ? " @#{pr.assignee.login}" : pr.user ? " @#{pr.user.login}" : "")
  end

  def html_link
    pr.rels[:html].href
  end

  def to_hash
    { :data => @pr.to_hash }
  end
end

class DummyPullRequest
  def initialize
    # nop
  end

  def to_checklist_item
    "- [ ] #??? THIS IS DUMMY PULL REQUEST"
  end

  def html_link
    'http://github.com/DUMMY/DUMMY/issues/?'
  end

  def to_hash
    { :data => {} }
  end
end

def say(message, level)
  color = case level
    when :trace
      return unless ENV['DEBUG']
      nil
    when :debug
      return unless ENV['DEBUG']
      :blue
    when :info
      :green
    when :notice
      :yellow
    when :warn
      :magenta
    when :error
      :red
    end

  STDERR.puts message.colorize(color)
end

def git(*command)
  command = [ 'git', *command.map(&:to_s) ]
  say "Executing `#{command.join(' ')}`", :trace
  out, status = Open3.capture2(*command)
  unless status.success?
    raise "Executing `#{command.join(' ')}` failed: #{status}"
  end
  out.each_line
end


def git_config(key)
  host, _ = host_and_repository_and_scheme()

  plain_key = [ 'pr-release', key ].join('.')
  host_aware_key = [ 'pr-release', host, key ].compact.join('.')

  begin
    git(:config, '-f', '.git-pr-release', plain_key).first.chomp
  rescue
    git(:config, host_aware_key).first.chomp rescue nil
  end
end

def git_config_set(key, value)
  host, _ = host_and_repository_and_scheme()
  host_aware_key = [ 'pr-release', host, key ].compact.join('.')

  git :config, '--global', host_aware_key, value
end

# First line will be the title of the PR
DEFAULT_PR_TEMPLATE = <<ERB
Release <%= Time.now %>
<% pull_requests.each do |pr| -%>
<%=  pr.to_checklist_item %>
<% end -%>
ERB

def build_pr_title_and_body(release_pr, merged_prs)
  release_pull_request = target_pull_request = release_pr ? PullRequest.new(release_pr) : DummyPullRequest.new
  merged_pull_requests = pull_requests = merged_prs.map { |pr| PullRequest.new(pr) }

  template = DEFAULT_PR_TEMPLATE

  if path = git_config('template')
    template_path = File.join(git('rev-parse', '--show-toplevel').first.chomp, path)
    template = File.read(template_path)
  end

  erb = ERB.new template, nil, '-'
  content = erb.result binding
  content.split(/\n/, 2)
end

def dump_result_as_json(release_pr, merged_prs)
  puts( {
    :release_pull_request => (release_pr ? PullRequest.new(release_pr) : DummyPullRequest.new).to_hash,
    :merged_pull_requests => merged_prs.map { |pr| PullRequest.new(pr).to_hash }
  }.to_json )
end

def merge_pr_body(old_body, new_body)
  # Try to take over checklist statuses
  pr_body_lines = []

  Diff::LCS.traverse_balanced(old_body.split(/\r?\n/), new_body.split(/\r?\n/)) do |event|
    say "diff: #{event.inspect}", :trace
    action, old, new = *event
    old_nr, old_line = *old
    new_nr, new_line = *new

    case action
    when '=', '+'
      say "Use line as is: #{new_line}", :trace
      pr_body_lines << new_line
    when '-'
      say "Use old line: #{old_line}", :trace
      pr_body_lines << old_line
    when '!'
      if [ old_line, new_line ].all? { |line| /^- \[[ x]\]/ === line }
        say "Found checklist diff; use old one: #{old_line}", :trace
        pr_body_lines << old_line
      else
        # not a checklist diff, use both line
        say "Use line as is: #{old_line}", :trace
        pr_body_lines << old_line

        say "Use line as is: #{new_line}", :trace
        pr_body_lines << new_line
      end
    else
      say "Unknown diff event: #{event}", :warn
    end
  end

  pr_body_lines.join("\n")
end

def obtain_token!
  token = ENV.fetch('GIT_PR_RELEASE_TOKEN') { git_config('token') }

  unless token
    require 'highline/import'
    STDERR.puts 'Could not obtain GitHub API token.'
    STDERR.puts 'Trying to generate token...'

    username = ask('username? ') { |q| q.default = ENV['USER'] }
    password = ask('password? (not saved) ') { |q| q.echo = '*' }

    temporary_client = Octokit::Client.new :login => username, :password => password

    auth = request_authorization(temporary_client, nil)

    token = auth.token
    git_config_set 'token', token
  end

  token
end

def request_authorization(client, two_factor_code)
  params = { :scopes => [ 'public_repo', 'repo' ], :note => 'git-pr-release' }
  params[:headers] = { "X-GitHub-OTP" => two_factor_code} if two_factor_code

  auth = nil
  begin
    auth = client.create_authorization(params)
  rescue Octokit::OneTimePasswordRequired
    two_factor_code = ask('two-factor authentication code? ')
    auth = request_authorization(client, two_factor_code)
  end

  auth
end

def host_and_repository_and_scheme
  @host_and_repository_and_scheme ||= begin
    remote = git(:config, 'remote.origin.url').first.chomp
    unless %r(^\w+://) === remote
      remote = "ssh://#{remote.sub(':', '/')}"
    end

    remote_url = URI.parse(remote)
    repository = remote_url.path.sub(%r(^/), '').sub(/\.git$/, '')

    host = remote_url.host == 'github.com' ? nil : remote_url.host
    [ host, repository, remote_url.scheme ]
  end
end

host, repository, scheme = host_and_repository_and_scheme

if host
  # GitHub:Enterprise
  OpenSSL::SSL.const_set :VERIFY_PEER, OpenSSL::SSL::VERIFY_NONE # XXX

  Octokit.configure do |c|
    c.api_endpoint = "#{scheme}://#{host}/api/v3"
    c.web_endpoint = "#{scheme}://#{host}/"
  end
end

OptionParser.new do |opts|
  opts.on('-n', '--dry-run', 'Do not create/update a PR. Just prints out') do |v|
    @dry_run = v
  end
  opts.on('--json', 'Show data of target PRs in JSON format') do |v|
    @json = v
  end
end.parse!

### Set up configuration

production_branch  = git_config('branch.production') || 'master'
staging_branch     = git_config('branch.staging')    || 'staging'

say "Repository:        #{repository}", :debug
say "Production branch: #{production_branch}", :debug
say "Staging branch:    #{staging_branch}", :debug

client = Octokit::Client.new :access_token => obtain_token!

git :remote, 'update', 'origin'

### Fetch merged PRs

merged_feature_head_sha1s = git(
  :log, '--merges', '--pretty=format:%P', "origin/#{production_branch}..origin/#{staging_branch}"
).map do |line|
  main_sha1, feature_sha1 = line.chomp.split /\s+/
  feature_sha1
end

merged_pull_request_numbers = git('ls-remote', 'origin', 'refs/pull/*/head').map do |line|
  sha1, ref = line.chomp.split /\s+/

  if merged_feature_head_sha1s.include? sha1
    if %r<^refs/pull/(\d+)/head$>.match ref
      pr_number = $1.to_i

      if git('merge-base', sha1, "origin/#{production_branch}").first.chomp == sha1
        say "##{pr_number} (#{sha1}) is already merged into #{production_branch}", :debug
      else
        pr_number
      end
    else
      say "Bad pull request head ref format: #{ref}", :warn
      nil
    end
  end
end.compact

if merged_pull_request_numbers.empty?
  say 'No pull requests to be released', :error
  exit 1
end

merged_prs = merged_pull_request_numbers.map do |nr|
  pr = client.pull_request repository, nr
  say "To be released: ##{pr.number} #{pr.title}", :notice
  pr
end

### Create a release PR

say 'Searching for existing release pull requests...', :info
found_release_pr = client.pull_requests(repository).find do |pr|
  pr.head.ref == staging_branch && pr.base.ref == production_branch
end
create_mode = found_release_pr.nil?

if @dry_run
  pr_title, new_body = build_pr_title_and_body found_release_pr, merged_prs
  pr_body = create_mode ? new_body : merge_pr_body(found_release_pr.body, new_body)

  say 'Dry-run. Not updating PR', :info
  say pr_title, :notice
  say pr_body, :notice
  dump_result_as_json( found_release_pr, merged_prs ) if @json
  exit 0
end

pr_title, pr_body = nil, nil
release_pr = nil

if create_mode
  created_pr = client.create_pull_request(
    repository, production_branch, staging_branch, 'Preparing release pull request...', ''
  )
  unless created_pr
    say 'Failed to create a new pull request', :error
    exit 1
  end
  pr_title, pr_body = build_pr_title_and_body created_pr, merged_prs
  release_pr = created_pr
else
  pr_title, new_body = build_pr_title_and_body found_release_pr, merged_prs
  pr_body = merge_pr_body(found_release_pr.body, new_body)
  release_pr = found_release_pr
end

say 'Pull request body:', :debug
say pr_body, :debug

updated_pull_request = client.update_pull_request(
  repository, release_pr.number, :title => pr_title, :body => pr_body
)

unless updated_pull_request
  say 'Failed to update a pull request', :error
  exit 1
end

say "#{create_mode ? 'Created' : 'Updated'} pull request: #{updated_pull_request.rels[:html].href}", :notice
dump_result_as_json( release_pr, merged_prs ) if @json
